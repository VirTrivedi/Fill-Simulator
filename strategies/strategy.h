#ifndef STRATEGY_H
#define STRATEGY_H

#include <vector>
#include <string>
#include "../types/market_data_types.h"

// Orders that can be generated by the strategy
struct OrderAction {
    enum class Type {
        ADD,
        CANCEL,
        REPLACE
    };
    
    Type type;
    uint64_t orderId;
    uint32_t symbolId;
    uint64_t sent_ts;
    uint64_t md_ts;
    int64_t price;
    uint32_t quantity;
    bool isBid;
    bool isPostOnly;
    
    OrderAction() : type(Type::ADD), orderId(0), symbolId(0), sent_ts(0), md_ts(0),
                   price(0), quantity(0), isBid(false), isPostOnly(true) {}
};

// Strategy interface
class Strategy {
public:
    virtual ~Strategy() = default;
    
    virtual std::vector<OrderAction> onBookTopUpdate(const book_top_t& bookTop) = 0;
    virtual std::vector<OrderAction> onFill(const book_fill_snapshot_t& fill) = 0;
    
    virtual std::vector<OrderAction> onOrderFilled(uint64_t orderId, int64_t fillPrice, 
                                                  uint32_t fillQty, bool isBid) = 0;
    
    virtual void setSymbolId(uint64_t symbolId) = 0;
    
    virtual std::string getName() const = 0;
};

#endif